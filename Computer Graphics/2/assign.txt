#include <Windows.h>
#include <MMSystem.h>
#include<glut.h>
#include <math.h>

using namespace std;

float spin = 0.0;
float spin2 = 0.0;
float spin3 = 0.0;
float spin4 = 0.0;
float spin5 = 0.0;
float spin6 = 0.0;
GLUquadricObj* gl = gluNewQuadric();


void display() { 
	glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix();
	glBegin(GL_QUADS); //sun 1
	glColor3f(1, 0.9, 0);
	glVertex2f(490, 550);
	glVertex2f(520, 550);
	glVertex2f(520, 555);
	glVertex2f(490, 555);
	glEnd();

	glBegin(GL_QUADS); //sun 2
	glColor3f(1, 0.9, 0);
	glVertex2f(490, 575);
	glVertex2f(528, 560);
	glVertex2f(530, 565);
	glVertex2f(492, 580);
	glEnd();

	glBegin(GL_QUADS); //sun 3
	glColor3f(1, 0.9, 0);
	glVertex2f(505, 595);
	glVertex2f(530, 575);
	glVertex2f(532, 580);
	glVertex2f(507, 600);
	glEnd();

	glBegin(GL_QUADS); //sun 4
	glColor3f(1, 0.9, 0);
	glVertex2f(490, 525);
	glVertex2f(522, 540);
	glVertex2f(522, 545);
	glVertex2f(488, 530);
	glEnd();

	glBegin(GL_QUADS); //sun 5
	glColor3f(1, 0.9, 0);
	glVertex2f(500, 505);
	glVertex2f(530, 525);
	glVertex2f(530, 530);
	glVertex2f(496, 508);
	glEnd();

	glBegin(GL_QUADS); //sun 6
	glColor3f(1, 0.9, 0);
	glVertex2f(525, 485);
	glVertex2f(550, 515);
	glVertex2f(550, 523);
	glVertex2f(521, 490);
	glEnd();

	glBegin(GL_QUADS); //sun 7
	glColor3f(1, 0.9, 0);
	glVertex2f(560, 480);
	glVertex2f(560, 525);
	glVertex2f(565, 525);
	glVertex2f(565, 480);
	glEnd();

	glBegin(GL_QUADS); //sun 8
	glColor3f(1, 0.9, 0);
	glVertex2f(590, 482);
	glVertex2f(595, 482);
	glVertex2f(585, 525);
	glVertex2f(580, 525);
	glEnd();

	glBegin(GL_QUADS); //ground
	glColor3f(0, 0, 0);
	glVertex2f(0, 0);
	glVertex2f(600, 0);
	glVertex2f(600, 50);
	glVertex2f(0, 50);
	glEnd();

	glBegin(GL_QUADS); //ground 1
	glColor3f(1, 0.9, 0);
	glVertex2f(0, 0);
	glVertex2f(150, 0);
	glVertex2f(150, 50);
	glVertex2f(0, 50);
	glEnd();

	glBegin(GL_QUADS); //ground 2
	glColor3f(1, 0.9, 0);
	glVertex2f(300, 0);
	glVertex2f(450, 0);
	glVertex2f(450, 50);
	glVertex2f(300, 50);
	glEnd();

	glBegin(GL_QUADS); //koshk
	glColor3f(0.5, 0.2, 0);
	glVertex2f(360, 50);
	glVertex2f(590, 50);
	glVertex2f(590, 200);
	glVertex2f(360, 200);
	glEnd();

	glBegin(GL_QUADS); //koshk 1
	glColor3f(0.5, 0.2, 0);
	glVertex2f(360, 200);
	glVertex2f(380, 200);
	glVertex2f(380, 360);
	glVertex2f(360, 360);
	glEnd();

	glBegin(GL_QUADS); //koshk 2
	glColor3f(0.5, 0.2, 0);
	glVertex2f(570, 200);
	glVertex2f(590, 200);
	glVertex2f(590, 360);
	glVertex2f(570, 360);
	glEnd();

	glBegin(GL_QUADS); //koshk
	glColor3f(0.5, 0.2, 0);
	glVertex2f(340, 360);
	glVertex2f(600, 360);
	glVertex2f(600, 450);
	glVertex2f(340, 450);
	glEnd();

	glBegin(GL_QUADS); //s
	glColor3f(0.5, 0.5, 0);
	glVertex2f(420, 200);
	glVertex2f(425, 200);
	glVertex2f(425, 240);
	glVertex2f(420, 240);
	glEnd();

	glPushMatrix(); //d
	glTranslated(422.5, 260, 0);
	glRotated(spin6, 0, 0, 1);
	glTranslated(-422.5, -260, 0);
	glBegin(GL_QUADS);
	glColor3f(0, 0, 0);
	glVertex2f(402.5, 240);
	glVertex2f(442.5, 240);
	glVertex2f(442.5, 280);
	glVertex2f(402.5, 280);
	glEnd();
	glPopMatrix();

	glBegin(GL_QUADS); //s
	glColor3f(0.5, 0.5, 0);
	glVertex2f(530, 200);
	glVertex2f(535, 200);
	glVertex2f(535, 250);
	glVertex2f(530, 250);
	glEnd();

	glPushMatrix(); //d
	glTranslated(532.5, 260, 0);
	glRotated(spin6, 0, 0, 30);
	glTranslated(-532.5, -260, 0);
	glBegin(GL_TRIANGLES);
	glColor3f(0, 0, 0);
	glVertex2f(512.5, 240);
	glVertex2f(532.5, 290);
	glVertex2f(552.5, 240);
	glEnd();
	glPopMatrix();



	glTranslated(spin, 0, 0);
	glPushMatrix();
	glTranslated(spin3, 0, 0);
	glBegin(GL_QUADS); //feet 1
	glColor3f(0, 0, 0);
	glVertex2f(150, 50);
	glVertex2f(190, 50);
	glVertex2f(190, 65);
	glVertex2f(150, 65);
	glEnd();

	glBegin(GL_QUADS); //leg 1
	glColor3f(0, 0, 0);
	glVertex2f(170, 50);
	glVertex2f(190, 50);
	glVertex2f(190, 200);
	glVertex2f(170, 200);
	glEnd();

	glBegin(GL_QUADS); // left hand
	glColor3f(1, 1, 1);
	glVertex2f(82, 245);
	glVertex2f(171, 305);
	glVertex2f(171, 325);
	glVertex2f(70, 260);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslated(spin2, 0, 0);
	glBegin(GL_QUADS); //feet 2
	glColor3f(0, 0, 0);
	glVertex2f(225, 50);
	glVertex2f(265, 50);
	glVertex2f(265, 65);
	glVertex2f(225, 65);
	glEnd();


	glBegin(GL_QUADS); //leg 2
	glColor3f(0, 0, 0);
	glVertex2f(225, 50);
	glVertex2f(245, 50);
	glVertex2f(245, 200);
	glVertex2f(225, 200);
	glEnd();

	glBegin(GL_QUADS); // right hand
	glColor3f(1, 1, 1);
	glVertex2f(245, 305);
	glVertex2f(333, 245);
	glVertex2f(345, 260);
	glVertex2f(245, 325);
	glEnd();

	glPopMatrix();


	glBegin(GL_QUADS); //body
	glColor3f(1, 1, 1);
	glVertex2f(170, 200);
	glVertex2f(245, 200);
	glVertex2f(245, 325);
	glVertex2f(170, 325);
	glEnd();

	glBegin(GL_QUADS); //neck
	glColor3f(0.8, 0.5, 0.3);
	glVertex2f(205, 325);
	glVertex2f(215, 325);
	glVertex2f(215, 335);
	glVertex2f(205, 335);
	glEnd();
	glPopMatrix();

	glPushMatrix(); //head
	glColor3f(0.8, 0.5, 0.3);
	glTranslated(spin + 210, spin2 + 370, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPushMatrix(); //eye 1
	glColor3f(0, 0, 0);
	glTranslated(spin + 193, spin2 + 375, 0);
	gluDisk(gl, 0, 5, 50, 50);
	glPopMatrix();

	glPushMatrix(); //eye 2
	glColor3f(0, 0, 0);
	glTranslated(spin + 227, spin2 + 375, 0);
	gluDisk(gl, 0, 5, 50, 50);
	glPopMatrix();

	glPushMatrix(); //Mouth
	glColor3f(0, 0, 0);
	glTranslated(spin + 210, spin2 + 355, 0);
	gluDisk(gl, 3, 5, 50, 50);
	glPopMatrix();

	glPushMatrix(); //sun
	glColor3f(1, 0.9, 0);
	glTranslated(565, 550, 0);
	gluDisk(gl, 0, 45, 50, 50);
	glPopMatrix();

	glPushMatrix(); //palm
	glColor3f(0.8, 0.5, 0.3);
	glTranslated(spin + spin3 + 70, 250, 0);
	gluDisk(gl, 0, 12, 50, 50);
	glPopMatrix();

	glPushMatrix(); //palm2
	glColor3f(0.8, 0.5, 0.3);
	glTranslated(spin + spin2 + 342, 250, 0);
	gluDisk(gl, 0, 12, 50, 50);
	glPopMatrix();

	glPushMatrix(); //cloud 1
	glTranslated(spin4, 0, 0);
	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(150, 525, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(180, 550, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(210, 525, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();
	glPopMatrix();

	glPushMatrix(); //cloud 2
	glTranslated(spin5, 0, 0);
	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(350, 525, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(380, 550, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1, 1, 1);
	glTranslated(410, 525, 0);
	gluDisk(gl, 0, 35, 50, 50);
	glPopMatrix();

	glPopMatrix();
	glFlush();

}


void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case'r':
		spin += 10; #move 
		break;
	case'l':
		spin -= 10;
		break;
	case'd':
		spin += 10;
		break;
	case'a':
		spin -= 10;
		break;
	case'x':
		spin2 = 30; #ytfkk
		spin3 = -30;
		break;
	case'k':
		spin6 += 10; #koshk
		break;
	case'j':
		spin6 -= 10;
		break;
	default:
		break;
	}
	glutPostRedisplay();
}
void keyup(unsigned char key, int x, int y) {
	switch (key)
	{
	case 'r':
		spin = 0;
		break;
	case'l':
		spin = 0;
		break;
	case'x':
		spin2 = 0;
		spin3 = 0;
		sndPlaySound(TEXT("./Thank God Sound Effect.wav"), SND_ASYNC);
		break;
	default:
		break;
	}
	glutPostRedisplay();
}
void timer(int valu) {
	if (spin >= 600)
		spin = -350;

	if (spin4 >= 510)
		spin4 = -190;
	else
		spin4 += 60;
	if (spin5 >= 250)
		spin5 = -420;
	else
		spin5 += 60;

	glutPostRedisplay();
	glutTimerFunc(1000, timer, 0);
}

void main() {
	sndPlaySound(TEXT("./Hello - Sound Effect.wav"), SND_ASYNC);
	glutInitWindowSize(600, 600);
	glutInitWindowPosition(100, 100);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutCreateWindow("Mohamed Adel 20200233 && Abdelrahman fathy 20210723");
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutKeyboardUpFunc(keyup);
	glutTimerFunc(0, timer, 0);
	glClearColor(0, 0.8, 0.9, 0);
	gluOrtho2D(0, 600, 0, 600);
	glutMainLoop();

}
